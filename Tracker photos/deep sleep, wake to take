#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>
#include "time.h"
#include "esp_sleep.h"
#include "driver/gpio.h"
#include "FS.h"
#include "LittleFS.h"

// ==== USER SETTINGS ====
const char* WIFI_SSID = "StPeters-PSK";
const char* WIFI_PASS = "4OddDevices";
const char* NEOCITIES_API_KEY = "";
/**** ESP32-CAM â†’ Neocities JPEG Uploader with JSON Index ****/

const char* REMOTE_DIR = "photos";   
const char* JSON_PATH  = "/photos.json";  // local flash JSON file
const uint32_t CAPTURE_MS = 30000;   

const char* ntpServer        = "pool.ntp.org";
const long  gmtOffset_sec    = 12 * 3600;  
const int   daylightOffset_s = 3600;       

#define FLASH_LED_PIN      4
#define TRIGGER_PIN       15           
#define COOLDOWN_US (30ULL * 1000000ULL)  

// ==== CAMERA PINOUT (AI-Thinker) ====
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// ==== Filesystem Helpers ====
bool initFS() {
  if (!LittleFS.begin(true)) {  // auto-format on fail
    Serial.println("LittleFS mount failed");
    return false;
  }
  return true;
}

String loadJSON() {
  if (!LittleFS.exists(JSON_PATH)) return "[]";
  File f = LittleFS.open(JSON_PATH, "r");
  if (!f) return "[]";
  String content = f.readString();
  f.close();
  if (content.length() == 0) return "[]";
  return content;
}

void saveJSON(const String& json) {
  File f = LittleFS.open(JSON_PATH, "w");
  if (!f) {
    Serial.println("Failed to open JSON for writing");
    return;
  }
  f.print(json);
  f.close();
}

// ==== Misc Helpers ====
String filenameTimestamp() {
  struct tm ti;
  if (getLocalTime(&ti)) {
    char buf[32];
    strftime(buf, sizeof(buf), "%Y%m%d_%H%M%S", &ti);
    return String(buf);
  }
  return String(millis());
}

bool uploadMultipart(const String& filename, const uint8_t* data, size_t len, const char* mime) {
  String boundary = "----ESP32Boundary" + String((uint32_t)millis());
  String head =
    "--" + boundary + "\r\n"
    "Content-Disposition: form-data; name=\"" + filename + "\"; filename=\"" + filename.substring(filename.lastIndexOf('/')+1) + "\"\r\n"
    "Content-Type: " + String(mime) + "\r\n\r\n";
  String tail = "\r\n--" + boundary + "--\r\n";

  size_t total = head.length() + len + tail.length();
  uint8_t* body = (uint8_t*)malloc(total);
  if (!body) return false;
  memcpy(body, head.c_str(), head.length());
  memcpy(body + head.length(), data, len);
  memcpy(body + head.length() + len, tail.c_str(), tail.length());

  WiFiClientSecure client;
  client.setInsecure();
  HTTPClient http;
  if (!http.begin(client, "https://neocities.org/api/upload")) return false;
  http.addHeader("Authorization", String("Bearer ") + NEOCITIES_API_KEY);
  http.addHeader("Content-Type", "multipart/form-data; boundary=" + boundary);
  int code = http.POST(body, total);
  free(body);
  http.end();
  Serial.printf("Upload %s HTTP %d\n", filename.c_str(), code);
  return (code >= 200 && code < 300);
}

// ==== Capture + Upload ====
bool captureAndUpload() {
  digitalWrite(FLASH_LED_PIN, HIGH);
  delay(100);

  camera_fb_t* fb = esp_camera_fb_get();
  digitalWrite(FLASH_LED_PIN, LOW);
  if (!fb) { Serial.println("Camera capture failed"); return false; }

  String name = filenameTimestamp() + ".jpg";
  String remotePath = String(REMOTE_DIR) + "/" + name;

  // Upload the photo
  bool ok = uploadMultipart(remotePath, fb->buf, fb->len, "image/jpeg");
  esp_camera_fb_return(fb);
  if (!ok) return false;

  // --- JSON handling ---
  String json = loadJSON();  
  if (json == "[]") json = "[\"" + name + "\"]";
  else json = json.substring(0, json.length()-1) + ",\"" + name + "\"]";

  saveJSON(json);  

  // Upload updated index
  uploadMultipart(String(REMOTE_DIR) + "/photos.json", (uint8_t*)json.c_str(), json.length(), "application/json");

  return true;
}

bool initCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer   = LEDC_TIMER_0;
  config.pin_d0       = Y2_GPIO_NUM;
  config.pin_d1       = Y3_GPIO_NUM;
  config.pin_d2       = Y4_GPIO_NUM;
  config.pin_d3       = Y5_GPIO_NUM;
  config.pin_d4       = Y6_GPIO_NUM;
  config.pin_d5       = Y7_GPIO_NUM;
  config.pin_d6       = Y8_GPIO_NUM;
  config.pin_d7       = Y9_GPIO_NUM;
  config.pin_xclk     = XCLK_GPIO_NUM;
  config.pin_pclk     = PCLK_GPIO_NUM;
  config.pin_vsync    = VSYNC_GPIO_NUM;
  config.pin_href     = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn     = PWDN_GPIO_NUM;
  config.pin_reset    = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size   = FRAMESIZE_SVGA;
  config.jpeg_quality = 12;
  config.fb_count     = 1;
  return (esp_camera_init(&config) == ESP_OK);
}

// ---- Sleep helpers ----
void holdFlashLowAndEnableDeepSleepHold() {
  digitalWrite(FLASH_LED_PIN, LOW);
  gpio_hold_en((gpio_num_t)FLASH_LED_PIN);
  gpio_deep_sleep_hold_en();
}

void releaseFlashHoldAfterWake() {
  gpio_deep_sleep_hold_dis();
  gpio_hold_dis((gpio_num_t)FLASH_LED_PIN);
}

void armTriggerAndSleep() {
  while (digitalRead(TRIGGER_PIN) == HIGH) {
    delay(10);
  }
  esp_sleep_enable_ext0_wakeup(GPIO_NUM_15, 1); 
  holdFlashLowAndEnableDeepSleepHold();
  esp_deep_sleep_start();
}

void sleepCooldown30sOnlyTimer() {
  esp_sleep_enable_timer_wakeup(COOLDOWN_US);
  holdFlashLowAndEnableDeepSleepHold();
  esp_deep_sleep_start();
}

void setup() {
  pinMode(FLASH_LED_PIN, OUTPUT);
  digitalWrite(FLASH_LED_PIN, LOW);
  pinMode(TRIGGER_PIN, INPUT_PULLDOWN);  
  Serial.begin(115200);
  delay(100);

  releaseFlashHoldAfterWake();
  initFS();   // <<< mount filesystem for JSON persistence

  esp_sleep_wakeup_cause_t cause = esp_sleep_get_wakeup_cause();

  if (cause == ESP_SLEEP_WAKEUP_EXT0) {
    Serial.println("Wake: EXT0 (GPIO15 HIGH). Capturing...");

    WiFi.mode(WIFI_STA);
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print("."); }
    Serial.println("\nWiFi connected");

    configTime(gmtOffset_sec, daylightOffset_s, ntpServer);

    if (!initCamera()) {
      Serial.println("Camera init failed");
      sleepCooldown30sOnlyTimer();
    }

    bool ok = captureAndUpload();
    if (!ok) Serial.println("Capture/upload failed");

    esp_camera_deinit();

    Serial.println("Cooldown for 30s...");
    sleepCooldown30sOnlyTimer();
  }
  else if (cause == ESP_SLEEP_WAKEUP_TIMER) {
    Serial.println("Wake: TIMER (cooldown done). Re-arming trigger...");
    armTriggerAndSleep();
  }
  else {
    Serial.println("Boot/other wake. Sleeping until GPIO15 goes HIGH...");
    armTriggerAndSleep();
  }
}

void loop() {}
