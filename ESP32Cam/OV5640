/Upload as a esp32 Wrover Module/
/**** ESP32 + OV5640 (QY5640 REV1.2.x) — Access Point Snapshot Server ****/
#include "esp_camera.h"
#include <WiFi.h>
#include <WebServer.h>

/* ======= Board-specific pin map (OV5640 V1.2.x) ======= */
#define CAM_SIOC   23
#define CAM_SIOD   22
#define CAM_XCLK   15
#define CAM_VSYNC  18
#define CAM_HREF   36
#define CAM_PCLK   26
// Data bus D0..D7
#define CAM_D0      2
#define CAM_D1     14
#define CAM_D2     35
#define CAM_D3     12
#define CAM_D4     27
#define CAM_D5     33
#define CAM_D6     34
#define CAM_D7     39
#define CAM_RESET   5
#define CAM_PWDN   -1

// Onboard LED (per template this is LED1)
#define LED_PIN    25

/* ======= Access Point config (your usual preferences) ======= */
const char* AP_SSID = "OV5640 Streamer";
const char* AP_PASS = ""; // open
IPAddress apIP(192,168,4,1), gateway(192,168,4,1), mask(255,255,255,0);

WebServer server(80);

void handleRoot() {
  String html = R"HTML(
  <!doctype html><html><head><meta name="viewport" content="width=device-width,initial-scale=1">
  <title>ESP32 OV5640</title>
  <style>body{font-family:Helvetica,Arial,sans-serif;margin:0;padding:20px;background:#111;color:#eee}
  .card{max-width:800px;margin:auto;background:#1c1c1c;border-radius:12px;padding:16px;box-shadow:0 8px 24px rgba(0,0,0,.4)}
  button{font-size:18px;padding:10px 16px;border:0;border-radius:10px;cursor:pointer}
  img{width:100%;height:auto;border-radius:10px;margin-top:12px}
  </style></head><body>
  <div class="card">
    <h2>ESP32 + OV5640 (Snapshot)</h2>
    <button onclick="snap()">Take Photo</button>
    <img id="img" src="/capture">
  </div>
  <script>
    function snap(){document.getElementById('img').src='/capture?t='+Date.now();}
    setInterval(()=>snap(), 4000); // auto-refresh every 4s
  </script></body></html>
  )HTML";
  server.send(200, "text/html", html);
}

void handleCapture() {
  // flash LED while capturing
  digitalWrite(LED_PIN, HIGH);
  camera_fb_t *fb = esp_camera_fb_get();
  digitalWrite(LED_PIN, LOW);

  if (!fb) { server.send(500, "text/plain", "Camera capture failed"); return; }

  // Send JPEG (use send_P to transmit binary buffer)
  server.send_P(200, "image/jpeg", (const char*)fb->buf, fb->len);
  esp_camera_fb_return(fb);
}

void setupCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer   = LEDC_TIMER_0;

  config.pin_d0       = CAM_D0;
  config.pin_d1       = CAM_D1;
  config.pin_d2       = CAM_D2;
  config.pin_d3       = CAM_D3;
  config.pin_d4       = CAM_D4;
  config.pin_d5       = CAM_D5;
  config.pin_d6       = CAM_D6;
  config.pin_d7       = CAM_D7;

  config.pin_xclk     = CAM_XCLK;
  config.pin_pclk     = CAM_PCLK;
  config.pin_vsync    = CAM_VSYNC;
  config.pin_href     = CAM_HREF;
  config.pin_sscb_sda = CAM_SIOD;
  config.pin_sscb_scl = CAM_SIOC;
  config.pin_pwdn     = CAM_PWDN;
  config.pin_reset    = CAM_RESET;

  // Many OV5640 boards are happiest around 10–12 MHz XCLK
  config.xclk_freq_hz = 10000000;   // try 12000000 if you get no image
  config.pixel_format = PIXFORMAT_JPEG;

 if (psramFound()) {
    // Highest supported sizes are:
    // FRAMESIZE_UXGA  (1600x1200)
    // FRAMESIZE_QXGA  (2048x1536)
    // FRAMESIZE_QSXGA (2592x1944) <-- full 5MP
    config.frame_size   = FRAMESIZE_QSXGA; // max 2592x1944
    config.jpeg_quality = 5;               // 0 = best, 63 = worst
    config.fb_count     = 1;               // 2 can cause memory pressure at max res
    config.fb_location  = CAMERA_FB_IN_PSRAM;
} else {
    config.frame_size   = FRAMESIZE_SVGA;  // fallback if no PSRAM
    config.jpeg_quality = 10;
    config.fb_count     = 1;
    config.fb_location  = CAMERA_FB_IN_DRAM;
}


  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed: 0x%x\n", err);
    while (true) { delay(1000); }
  }
}

void setup() {
  pinMode(LED_PIN, OUTPUT); digitalWrite(LED_PIN, LOW);
  Serial.begin(115200);

  setupCamera();

  // Start AP
  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(apIP, gateway, mask);
  WiFi.softAP(AP_SSID, AP_PASS);
  Serial.print("AP up: "); Serial.println(AP_SSID);
  Serial.println("Open http://192.168.4.1/");

  // Web routes
  server.on("/", handleRoot);
  server.on("/capture", handleCapture);
  server.begin();
}

void loop() {
  server.handleClient();
}
